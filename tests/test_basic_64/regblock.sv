// Generated by PeakRDL-etana - A free and open-source SystemVerilog generator
//  https://github.com/daxzio/PeakRDL-etana

module regblock #(
        parameter ID_WIDTH = 1
    ) (
        input wire clk,
        input wire rst,

        input wire s_obi_req,
        output logic s_obi_gnt,
        input wire [7:0] s_obi_addr,
        input wire s_obi_we,
        input wire [7:0] s_obi_be,
        input wire [63:0] s_obi_wdata,
        input wire [ID_WIDTH-1:0] s_obi_aid,
        output logic s_obi_rvalid,
        input wire s_obi_rready,
        output logic [63:0] s_obi_rdata,
        output logic s_obi_err,
        output logic [ID_WIDTH-1:0] s_obi_rid


    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [7:0] cpuif_addr;
    logic [63:0] cpuif_wr_data;
    logic [63:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [63:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;


    // State & holding regs
    logic is_active; // A request is being served (not yet fully responded)
    logic gnt_q; // one-cycle grant for A-channel
    logic rsp_pending; // response ready but not yet accepted by manager
    logic [63:0] rsp_rdata_q;
    logic rsp_err_q;
    logic [$bits(s_obi_rid)-1:0] rid_q;

    // Latch AID on accept to echo back the response
    always_ff @(posedge clk) begin
        if (rst) begin
            is_active <= 1'b0;
            gnt_q <= 1'b0;
            rsp_pending <= 1'b0;
            rsp_rdata_q <= '0;
            rsp_err_q <= 1'b0;
            rid_q <= '0;

            cpuif_req <= '0;
            cpuif_req_is_wr <= '0;
            cpuif_addr <= '0;
            cpuif_wr_data <= '0;
            cpuif_wr_biten <= '0;
        end else begin
            // defaults
            cpuif_req <= 1'b0;
            gnt_q <= s_obi_req & ~is_active;

            // Accept new request when idle
            if (~is_active) begin
                if (s_obi_req) begin
                    is_active <= 1'b1;
                    cpuif_req <= 1'b1;
                    cpuif_req_is_wr <= s_obi_we;
                    cpuif_addr <= s_obi_addr;
                    cpuif_wr_data <= s_obi_wdata;
                    rid_q <= s_obi_aid;
                    for (int i = 0; i < 8; i++) begin
                        cpuif_wr_biten[i*8 +: 8] <= {8{ s_obi_be[i] }};
                    end
                end
            end

            // Capture response
            if (is_active && (cpuif_rd_ack || cpuif_wr_ack)) begin
                rsp_pending <= 1'b1;
                rsp_rdata_q <= cpuif_rd_data;
                rsp_err_q <= cpuif_rd_err | cpuif_wr_err;
                // NOTE: Keep 'is_active' asserted until the external R handshake completes
            end

            // Complete external R-channel handshake only if manager ready
            if (rsp_pending && s_obi_rvalid && s_obi_rready) begin
                rsp_pending <= 1'b0;
                is_active <= 1'b0; // free to accept the next request
            end
        end
    end

    // R-channel outputs (held stable while rsp_pending=1)
    assign s_obi_rvalid = rsp_pending;
    assign s_obi_rdata = rsp_rdata_q;
    assign s_obi_err = rsp_err_q;
    assign s_obi_rid = rid_q;

    // A-channel grant (registered one-cycle pulse when we accept a request)
    assign s_obi_gnt = gnt_q;

    logic cpuif_req_masked;

    // Read & write latencies are balanced. Stalls not required
    assign cpuif_req_stall_rd = '0;
    assign cpuif_req_stall_wr = '0;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    logic [0:0] decoded_reg_strb_regs [32];
    logic decoded_req;
    logic decoded_req_is_wr;
    /* verilator lint_off UNUSEDSIGNAL */
    logic [63:0] decoded_wr_data;
    logic [63:0] decoded_wr_biten;
    /* verilator lint_on UNUSEDSIGNAL */

    always @(*) begin
        /* verilator lint_off UNUSEDSIGNAL */
        integer next_cpuif_addr;
        /* verilator lint_on UNUSEDSIGNAL */
        for(int i0=0; i0<32; i0++) begin : gen_loop_3
            next_cpuif_addr = 32'h0 + i0*8'h8;
            decoded_reg_strb_regs[i0] = cpuif_req_masked & (cpuif_addr == next_cpuif_addr[7:0]);
        end
    end

    // Pass down signals to next stage
    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;


    //--------------------------------------------------------------------------
    // Field storage declarations
    //--------------------------------------------------------------------------

    // Field: regblock.regs[].f
    logic [63:0] field_storage_regs_f_value [32] ;
    logic [63:0] field_combo_regs_f_next [32] ;
    logic field_combo_regs_f_load_next [32] ;
    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_5
        // always_comb begin
        always @(*) begin
            logic [63:0] next_c;
            logic load_next_c;
            next_c = field_storage_regs_f_value[i0];
            load_next_c = '0;
            if(decoded_reg_strb_regs[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage_regs_f_value[i0] & ~decoded_wr_biten[63:0]) | (decoded_wr_data[63:0] & decoded_wr_biten[63:0]);
                load_next_c = '1;
            end
            field_combo_regs_f_next[i0] = next_c;
            field_combo_regs_f_load_next[i0] = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage_regs_f_value[i0] <= 64'h1;
            end else if(field_combo_regs_f_load_next[i0]) begin
                field_storage_regs_f_value[i0] <= field_combo_regs_f_next[i0];
            end
        end
    end

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    assign cpuif_wr_ack = decoded_req & decoded_req_is_wr;
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

//--------------------------------------------------------------------------
// Readback
//--------------------------------------------------------------------------
    logic readback_external_rd_ack;
    assign readback_external_rd_ack = 0;

    logic readback_err;
    logic readback_done;
    logic [63:0] readback_data;

    // Assign readback values to a flattened array
    logic [63:0] readback_array[32];
    for(genvar i0=0; i0<32; i0++) begin : gen_loop_1
        assign readback_array[i0*1 + 0][63:0] = (decoded_reg_strb_regs[i0] && !decoded_req_is_wr) ? field_storage_regs_f_value[i0] : '0;
    end

    // Reduce the array
    // always_comb begin
    always @(*) begin
        logic [63:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<32; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign cpuif_rd_ack = readback_done;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule
